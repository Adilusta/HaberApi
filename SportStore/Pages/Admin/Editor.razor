@page "/admin/haberler/edit/{id:long}"
@page "/admin/haberler/create"
@inherits OwningComponentBase<IHaberRepository>

<style>
    div.validation-message {
        color: rgb(220,53,69);
        font-weight: 500
    }
</style>


<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Haber </h3>
<EditForm Model="Haber" OnValidSubmit="SaveHaber">
    <DataAnnotationsValidator />
    @if (Haber.HaberId != 0)
    {
        <div class="form-group">
            <label>Haber ID</label>
            <input class="form-control" disabled value="@Haber.HaberId" />
        </div>
    }
    <div class="form-group">
        <label>Haber Basligi</label>
        <ValidationMessage For="@(()=>Haber.HaberBasligi)" />
        <InputText class="form-control" @bind-Value="Haber.HaberBasligi" />
    </div>
    <div class="form-group">
        <label>Haber İcerigi</label>
        <ValidationMessage For="@(()=>Haber.HaberIcerigi)" />
        <InputText class="form-control" @bind-Value="Haber.HaberIcerigi" />
    </div>

    <div class="form-group">
        <label>Haber Tarihi</label>
        <ValidationMessage For="@(() => Haber.HaberTarihi)" />
        <InputDate class="form-control" @bind-Value="Haber.HaberTarihi" />
    </div>


  @*  <div class="form-group">
        <label>Haber Tarihi</label>
        <ValidationMessage For="@(() => Haber.HaberTarihi)" />
        <InputDate class="form-control" @bind-Value =Haber.HaberTarihi" />
    </div>*@
   

   @* <div class="form-group">
        <label>Price</label>
        <ValidationMessage For="@(() => Product.Price)" />
        <InputNumber class="form-control" @bind-Value="Product.Price" />
    </div>*@

    <button type="submit" class="btn btn-@ThemeColor">Save</button>
    <NavLink class="btn btn-secondary" href="/admin/haberler">
        Cancel
    </NavLink>

</EditForm>

@code {
    public IHaberRepository Repository => Service;

    [Inject]
    public NavigationManager NavManager { get; set; }

    [Parameter]
    public long Id { get; set; } = 0;

    public Haber Haber { get; set; } = new Haber();

    protected override void OnParametersSet()
    {
        if (Id != 0)
        {
            Haber = Repository.Haberler.FirstOrDefault(p =>
            p.HaberId == Id);

        }
    }

    public void SaveHaber()
    {
        if (Id == 0)
        {
            Repository.CreateHaber(Haber);
        }
        else
        {
            Repository.SaveHaber(Haber);
        }
        NavManager.NavigateTo("/admin/haberler");
    }

    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Create" : "Edit";
}
